# What happens when you initialize a repository? Why do you need to do it?
create a new git file 

# How is the staging area different from the working directory and the repository? What value do you think it offers?
working directory -> adding files to staging area -> create commit -> repository
staging area show files that not in the working area yet,
they help us decide if to create a repository with those files or not. 

# How can you use the staging area to make sure you have one commit per logical change?
check the changes using git diff --stage before commit

# What are some situations when branches would be helpful in keeping your history organized? How would branches help?
in case we want try few new directions but we want to keep the main program as is in the meanwhile, and when we go up to production we can move to one of the branches, also we want to revert easily, we'll use it when we are working on a new feature, fixing a bug, experimental projects when we try all that we never hurt the master branch.

# How do the diagrams help you visualize the branch structure? 
it's very helpful, it basically show u which branches u have, what and how many commits on each branch 

# What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
combine to main branch, no need to keep few branches, also this is the way to do it when we want combine all new features from both branches

# What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
automatic merge is good when there no special problems 
while merge manually we can check and be sure that we are merging only the code that want  like when we have a merging conflict because two people edit the some part of code and need to decide which code we'll stay, also merging is very important when we working on a side feature but want that branch to always be update with master code and features. 
  